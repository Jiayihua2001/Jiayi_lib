import os
from ibslib.io import read,write 
from ase.io.jsonio import encode,decode
import ase.io
import json

def read_json(jsonfile):
    """
    Load Json file to return a dictionary storing ase structures
    """

    with open(jsonfile, "r") as f:
        stru_dict = json.load(f)

    ase_dict = {k: decode(encode(v)) for k, v in stru_dict.items()}
    return ase_dict


def write_json(out_dict, filename):
    """
    Write a Json file 
    out_dic should be ase_dic
    """

    str_list = [f'"{k}": {encode(v)},\n' for k, v in out_dict.items()]
    str_list[-1] = str_list[-1][:-2]
    with open(filename, "w") as wfile:
        wfile.write("{\n")
        wfile.writelines(str_list)
        wfile.write("\n}")

    return

def json_merge(struc_dir_path,json_name):
    """
        convert the structure json generated by ibslib to one asejson.
        struc_dirpath: str 
            directory path
        json_name:str
            name of merged json file
    """
    struc_dic = read(struc_dir_path,file_format='json')
    ase_dic={key:struc.get_ase_atoms() for key, struc in struc_dic.items()}
    str_list = [f'"{k}": {encode(v)},\n' for k, v in ase_dic.items()]
    str_list[-1] = str_list[-1][:-2]
    with open(json_name, "w") as wfile:
        wfile.write("{\n")
        wfile.writelines(str_list)
        wfile.write("\n}")
    return 

def json_to_geo(struc_dir_path,idx):
    test_json_path = os.path.join(struc_dir_path,os.listdir(struc_dir_path)[idx])
    struc=read(test_json_path,file_format='json')
    write('mol.in',struc,file_format='geo')
    return


def main():
    cd=os.getcwd()
    struc_dir_path=os.path.join(cd,'dimer_generation_0.83_0.85')
    json_name='generation.json'
    #json_merge(struc_dir_path,json_name)
    json_merge(struc_dir_path,json_name)
    
if __name__ == '__main__':
    main()








